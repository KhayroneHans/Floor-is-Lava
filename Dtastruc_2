// BSTNode.java
class BSTNode {
    int key;
    BSTNode left, right;

    // Constructor
    BSTNode(int key) {
        this.key = key;
        left = right = null;
    }
}

// BST.java
class BST {
    BSTNode root;

    BST() {
        root = null;
    }

    // Insert method
    public void insert(int key) {
        root = insertRec(root, key);
    }

    private BSTNode insertRec(BSTNode n, int k) {
        if (n == null) {
            return new BSTNode(k);
        }
        if (k < n.key) {
            n.left = insertRec(n.left, k);
        } else if (k > n.key) {
            n.right = insertRec(n.right, k);
        }
        return n;
    }

    // Search method
    public boolean search(BSTNode n, int k) {
        if (n == null) return false;
        if (n.key == k) return true;
        if (k < n.key) return search(n.left, k);
        else return search(n.right, k);
    }

    // Delete method
    public void deleteKey(int key) {
        root = deleteRec(root, key);
    }

    private BSTNode deleteRec(BSTNode n, int k) {
        if (n == null) return null;

        if (k < n.key) {
            n.left = deleteRec(n.left, k);
        } else if (k > n.key) {
            n.right = deleteRec(n.right, k);
        } else {
            // Node to be deleted found
            if (n.left == null) return n.right;
            else if (n.right == null) return n.left;

            // Node with two children
            n.key = minValue(n.right);
            n.right = deleteRec(n.right, n.key);
        }
        return n;
    }

    // Find minimum value
    private int minValue(BSTNode n) {
        int minv = n.key;
        while (n.left != null) {
            minv = n.left.key;
            n = n.left;
        }
        return minv;
    }

    // Inorder Traversal
    public void inorderPrint() {
        inorder(root);
        System.out.println();
    }

    private void inorder(BSTNode n) {
        if (n != null) {
            inorder(n.left);
            System.out.print(n.key + " ");
            inorder(n.right);
        }
    }
}

// Main.java
public class Main {
    public static void main(String[] args) {
        BST t = new BST();
        int[] vals = {50, 30, 70, 20, 40, 60, 80};

        // Insert elements
        for (int v : vals) {
            t.insert(v);
        }

        // Print inorder traversal
        System.out.print("Inorder after insertion: ");
        t.inorderPrint();

        // Search for 40
        if (t.search(t.root, 40)) {
            System.out.println("Search 40: Found");
        } else {
            System.out.println("Search 40: Not Found");
        }

        // Search for 100
        if (t.search(t.root, 100)) {
            System.out.println("Search 100: Found");
        } else {
            System.out.println("Search 100: Not Found");
        }

        // Delete 20
        t.deleteKey(20);
        System.out.print("After deleting 20: ");
        t.inorderPrint();

        // Delete 30
        t.deleteKey(30);
        System.out.print("After deleting 30: ");
        t.inorderPrint();

        // Delete 50
        t.deleteKey(50);
        System.out.print("After deleting 50: ");
        t.inorderPrint();
    }
}
